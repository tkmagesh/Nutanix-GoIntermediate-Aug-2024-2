// Code generated by mockery v2.39.1. DO NOT EDIT.

package services

import mock "github.com/stretchr/testify/mock"

// MockMessageService is an autogenerated mock type for the MessageService type
type MockMessageService struct {
	mock.Mock
}

type MockMessageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageService) EXPECT() *MockMessageService_Expecter {
	return &MockMessageService_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: msg
func (_m *MockMessageService) Send(msg string) bool {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMessageService_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockMessageService_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - msg string
func (_e *MockMessageService_Expecter) Send(msg interface{}) *MockMessageService_Send_Call {
	return &MockMessageService_Send_Call{Call: _e.mock.On("Send", msg)}
}

func (_c *MockMessageService_Send_Call) Run(run func(msg string)) *MockMessageService_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMessageService_Send_Call) Return(_a0 bool) *MockMessageService_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageService_Send_Call) RunAndReturn(run func(string) bool) *MockMessageService_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageService creates a new instance of MockMessageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageService {
	mock := &MockMessageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
